name: End-to-end tests

on:
  # Every weekday at 08:00 UTC
  schedule:
    - cron: "0 8 * * MON-FRI"
  # Run manually via GitHub API
  workflow_dispatch:
    inputs:
      projects:
        description: A JSON array of projects to deploy e.g. '["approved-premises-and-delius"]'
        type: string
        required: true
      directory:
        description: Directory containing test files
        type: string
        default: tests
      workers:
        description: The maximum number of concurrent worker processes that run in parallel.
        type: string
        default: "16"
  # Re-use in other workflows
  workflow_call:
    inputs:
      projects:
        description: A JSON array of projects to deploy e.g. '["approved-premises-and-delius"]'
        type: string
        required: true
      directory:
        description: Directory containing test files
        type: string
        default: tests
      env:
        description: Extra environment variables to pass-through to the tests
        type: string
        default: ''
      workers:
        description: The maximum number of concurrent worker processes that run in parallel.
        type: number
        default: 16

env:
  auto_pass_projects: '["manage-offences-and-delius","redrive-dead-letter-queues","feature-flags", "probation-search-and-delius","core-person-record-and-delius"]'

jobs:
  test:
    runs-on: moj-cloud-platform
    timeout-minutes: 60
    outputs:
      failed-projects: ${{ steps.json.outputs.failed-projects }}
      passed-projects: ${{ steps.json.outputs.passed-projects }}
      report-url: ${{ steps.html.outputs.report-url }}
    steps:
      - uses: actions/checkout@v4

      - name: Get tests to run - all tests
        if: inputs.projects == '' || inputs.projects == 'All'
        run: echo "projects=$(find projects -mindepth 1 -maxdepth 1 -printf "%f\n" | jq --raw-input . | jq --slurp --compact-output .)" | tee -a "$GITHUB_ENV"

      - name: Get tests to run - specific tests
        if: inputs.projects != '' && inputs.projects != 'All'
        run: |
          if ! echo "$projects" | jq empty; then echo 'Invalid JSON'; exit 1; fi
          echo "projects=$projects" | tee -a "$GITHUB_ENV"
        env:
          projects: ${{ inputs.projects }}

      - name: Get report output directory
        run: echo "report-dir=playwright-report/test/$REF/$(date '+%Y-%m-%d')/${{ github.sha }}/${{ github.run_id }}/${{ github.run_attempt }}" | tee -a "$GITHUB_ENV"
        env:
          REF: ${{ github.ref_name }}

      - name: Parse environment variables
        if: inputs.env != ''
        run: echo "$ENV_VARS" | jq -r 'to_entries | .[] | "\(.key)=\(.value)"' | tee -a "$GITHUB_ENV"
        env:
          ENV_VARS: ${{ inputs.env }}

      - uses: actions/setup-node@v4
        with:
          cache: npm

      - name: Install dependencies
        run: |
          npm ci
          npx playwright install

      - name: Run Playwright tests
        id: tests
        run: echo '${{ env.projects }}' | jq -r '.[]' | xargs npx playwright test --reporter=html,junit,json,line --workers="$WORKERS"
        env:
          TZ: Europe/London
          ENV: test
          TEST_DIR: ${{ inputs.directory || 'tests' }}
          WORKERS: ${{ inputs.workers || '16' }}
          PLAYWRIGHT_JUNIT_OUTPUT_NAME: junit.xml
          PLAYWRIGHT_JSON_OUTPUT_NAME: results.json
          # URLs
          DELIUS_URL: https://ndelius.test.probation.service.justice.gov.uk
          WORKFORCE_URL: https://workforce-management-dev.hmpps.service.justice.gov.uk
          ACCREDITED_PROGRAMMES_URL: https://accredited-programmes-dev.hmpps.service.justice.gov.uk
          DPS_URL: https://digital-dev.prison.service.justice.gov.uk
          PRISONER_PROFILE_URL: https://prisoner-dev.digital.prison.service.justice.gov.uk
          AUTH_URL: https://sign-in-dev.hmpps.service.justice.gov.uk
          PRISON_API: https://prison-api-dev.prison.service.justice.gov.uk
          EPF_API: https://effective-proposal-framework-and-delius-dev.hmpps.service.justice.gov.uk
          EXTERNAL_API: https://external-api-and-delius-dev.hmpps.service.justice.gov.uk
          REFERANDMONITOR_URL: https://hmpps-interventions-ui-dev.apps.live-1.cloud-platform.service.justice.gov.uk
          OASYS_URL: https://t2.oasys.service.justice.gov.uk/eor/f?p=100:101
          APPROVEDPREMISES_URL: https://approved-premises-dev.hmpps.service.justice.gov.uk
          CONSIDER_A_RECALL_URL: https://consider-a-recall-dev.hmpps.service.justice.gov.uk
          MANAGE_POM_CASES_URL: https://dev.moic.service.justice.gov.uk
          RESETTLEMENT_PASSPORT_AND_DELIUS_API: https://resettlement-passport-and-delius-dev.hmpps.service.justice.gov.uk
          CVL_URL: https://create-and-vary-a-licence-test2.hmpps.service.justice.gov.uk
          CVL_API: https://create-and-vary-a-licence-api-test2.hmpps.service.justice.gov.uk
          ARNS_API: https://assess-risks-and-needs-dev.hmpps.service.justice.gov.uk
          CAS2_SHORT_TERM_ACCOMMODATION_URL: https://community-accommodation-tier-2-dev.hmpps.service.justice.gov.uk
          CAS3_TRANSITIONAL_ACCOMMODATION_URL: https://transitional-accommodation-dev.hmpps.service.justice.gov.uk
          TIER_UI_URL: https://tier-dev.hmpps.service.justice.gov.uk
          PREPARE_A_CASE_FOR_SENTENCE_URL: https://prepare-a-case-dev.apps.live-1.cloud-platform.service.justice.gov.uk
          PRISON_IDENTIFIER_AND_DELIUS_URL: https://prison-identifier-and-delius-dev.hmpps.service.justice.gov.uk
          MANAGE_PEOPLE_ON_PROBATION_URL: https://manage-people-on-probation-dev.hmpps.service.justice.gov.uk
          SUBJECT_ACCESS_REQUEST_URL: https://subject-access-request-dev.hmpps.service.justice.gov.uk
          COURT_HEARING_EVENT_RECEIVER_URL: https://court-hearing-event-receiver-dev.hmpps.service.justice.gov.uk
          APPOINTMENT_REMINDERS_URL: https://appointment-reminders-dev.hmpps.service.justice.gov.uk

          # Credentials
          DELIUS_USERNAME: ${{ secrets.E2E_DELIUS_USERNAME }}
          DELIUS_PASSWORD: ${{ secrets.E2E_DELIUS_PASSWORD }}
          DPS_USERNAME: ${{ secrets.E2E_DPS_USERNAME }}
          DPS_PASSWORD: ${{ secrets.E2E_DPS_PASSWORD }}
          CRED_USERNAME: ${{ vars.E2E_CLIENT_ID }}
          CRED_PASSWORD: ${{ secrets.E2E_CLIENT_SECRET }}
          REFERANDMONITOR_SUPPLIER_USERNAME: ${{ secrets.E2E_REFERANDMONITOR_SUPPLIER_USERNAME }}
          REFERANDMONITOR_SUPPLIER_PASSWORD: ${{ secrets.E2E_REFERANDMONITOR_SUPPLIER_PASSWORD }}
          OASYS_USERNAME_BOOKING: AutomatedTestUser
          OASYS_PASSWORD_BOOKING: ${{ secrets.E2E_OASYS_PASSWORD_BOOKING }}
          OASYS_USERNAME_RSR: AutomatedTestUser2
          OASYS_PASSWORD_RSR: ${{ secrets.E2E_OASYS_PASSWORD_RSR }}
          OASYS_USERNAME_TIMELINE: AutomatedTestUser3
          OASYS_PASSWORD_TIMELINE: ${{ secrets.E2E_OASYS_PASSWORD_TIMELINE }}
          OASYS_USERNAME_ASSESSMENT: AutomatedTestUser4
          OASYS_PASSWORD_ASSESSMENT: ${{ secrets.E2E_OASYS_PASSWORD_ASSESSMENT }}
          OASYS_USERNAME_OPD: CENTRAL_SMALEPATI_2
          OASYS_PASSWORD_OPD: ${{ secrets.E2E_OASYS_PASSWORD_OPD }}
          OASYS_USERNAME_APPROVEDPSOROLE: AUTOMATEDTESTUSER5
          OASYS_PASSWORD_APPROVEDPSOROLE: ${{ secrets.E2E_OASYS_PASSWORD_APPROVEDPSOROLE }}
          OASYS_USERNAME_ACCREDITED_PROGRAMMES: AUTOMATEDTESTUSER6
          OASYS_PASSWORD_ACCREDITED_PROGRAMMES: ${{ secrets.E2E_OASYS_PASSWORD_ACCREDITED_PROGRAMMES }}
          CONSIDER_A_RECALL_MRD_USERNAME: ${{ secrets.E2E_CONSIDER_RECALL_MRD_USERNAME }}
          CONSIDER_A_RECALL_MRD_PASSWORD: ${{ secrets.E2E_CONSIDER_RECALL_MRD_PASSWORD }}

      - name: Parse JSON results
        if: always()
        id: json
        run: |
          if [ -f results.json ]; then
            skipped_projects=$(echo "$all_projects" | jq -r '.[]' | while read -r project; do if [ ! -d "tests/$project" ]; then echo "$project"; fi; done | jq --raw-input . | jq --slurp --compact-output .)
            failed_projects=$(jq -r '.suites[].specs[] | select(.ok == false).file' results.json | xargs -n1 dirname | sort -u | jq --raw-input . | jq --slurp --compact-output .)
            passed_projects=$(jq --compact-output --null-input --argjson all "$all_projects" --argjson failed "$failed_projects" --argjson skipped "$skipped_projects" '{all: $all, failed: $failed, skipped: $skipped} | .all - .failed - .skipped')
            merged=$(echo "$auto_pass_projects $passed_projects" | jq -s 'add')
            passed_projects=$(echo "$merged $projects" | jq -sc '.[0] - (.[0] - .[1])')
          fi
          echo "skipped-projects=${skipped_projects:-'[]'}" | tee -a "$GITHUB_OUTPUT"
          echo "failed-projects=${failed_projects:-'[]'}" | tee -a "$GITHUB_OUTPUT"
          echo "passed-projects=${passed_projects:-'[]'}" | tee -a "$GITHUB_OUTPUT"
        env:
          all_projects: ${{ env.projects }}

      - name: Publish JUnit report
        if: always()
        uses: mikepenz/action-junit-report@ee6b445351cd81e2f73a16a0e52d598aeac2197f # v5.3.0
        id: junit
        with:
          check_name: End-to-end test results
          report_paths: junit.xml

      - name: Publish HTML report
        if: always()
        uses: JamesIves/github-pages-deploy-action@15de0f09300eea763baee31dff6c6184995c5f6a # v4
        with:
          folder: playwright-report
          target-folder: ${{ env.report-dir }}

      - name: Output HTML report URL
        id: html
        if: always()
        run: |
          echo "[🎭 Playwright HTML Report](https://ministryofjustice.github.io/hmpps-probation-integration-e2e-tests/$report_dir)" | tee -a "$GITHUB_STEP_SUMMARY"
          echo "report-url=https://ministryofjustice.github.io/hmpps-probation-integration-e2e-tests/$report_dir" | tee -a "$GITHUB_OUTPUT"
        env:
          report_dir: ${{ env.report-dir }}

      - name: Send message to Slack
        uses: slackapi/slack-github-action@485a9d42d3a73031f12ec201c457e2162c45d02d # v2.0.0
        if: ${{ failure() && github.event_name == 'schedule' }}
        with:
          method: chat.postMessage
          payload: |
            {
              "channel": "probation-integration-notifications",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "🎭 *Probation Integration* end-to-end test failure"
                  }
                },
                {
                  "type": "context",
                  "elements": [
                    {
                      "type": "mrkdwn",
                      "text": ">${{ steps.junit.outputs.total }} tests run, ${{ steps.junit.outputs.passed }} passed, ${{ steps.junit.outputs.skipped }} skipped, ${{ steps.junit.outputs.failed }} failed."
                    }
                  ]
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "📈 Report"
                      },
                      "url": "https://ministryofjustice.github.io/hmpps-probation-integration-e2e-tests/${{ env.report-dir }}"
                    },
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "📝 Logs"
                      },
                      "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                    }
                  ]
                }
              ]
            }
          token: ${{ secrets.SLACK_BOT_TOKEN }}
